import java.io.IOException;

public class Main {
    public static void main(String[] args) throws IOException {
        int temp_int; /*Переменная для хранения значений, получаемых из входного потока  */
        byte n1, n2;
        boolean simvol_perenosa = false; /*В цикле ниже, значение считывается один раз. и один раз записывается
        В случае когда во входном потоке последовательность символов с кодами 13 и 10 ('\r' '\n'), записать
        надо только один символ. В этом случае переменная становится true и в цикле пропускается один "тик"
        записи в выходной поток. */
        try {
            temp_int = System.in.read(); /*считываем первый байт входного потока */
            if (temp_int != -1) /* проверяем первый байт на "-1", то есть не кончился ли поток. Защита от "дурака" учителя :-)*/
            {
                n1 = (byte) temp_int;
                for (; ; ) {
                    temp_int = System.in.read();

                    if (temp_int == -1) { /* если конец входного потока*/
                        System.out.write(n1);  break; } /* то записываем последний "нормальный" байт в выходной поток */

                    n2 = (byte) temp_int;
                    if (!simvol_perenosa) /*если прошлый раз выпадала комбинация   '\r' и '\n' , то пропускаем часть кода */
                    {
                        if ((n2 == 10) && (n1 == 13)) /*проверка соответсвия символов кодам 13 и 10 ('\r' '\n'). */
                        {
                            simvol_perenosa = true;  /* в следущий проход цикла будет прощен код записи байта в выходной поток */
                            n1 = 10; /* записываем в переменную значение  с кодом 10 ('\n') */
                            System.out.write(10); /* выводим в поток  байт с значением 10 ('\n') */

                        } else {

                            System.out.write(n1); /*пишем в выходной поток байт из предыдущего прохода */
                        }
                    } else {
                        simvol_perenosa = false; /* меняем флаг переноса, что бы в следущем проходе не пропусить запись байта */
                    }
                    n1 = n2; /* делаем текущий байт "предыдущим для следующего прохода"  */
                }
            }

        } catch (IOException e) {
            System.out.println(e.getMessage());
        } finally {
            System.out.flush();
        }
    }
}
